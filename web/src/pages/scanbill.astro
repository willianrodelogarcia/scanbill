---
import Layout from '../layouts/Layout.astro';
export const prerender = false;
const api_url = import.meta.env.PUBLIC_API_URL;
---

<Layout>
  <div id="config" data-api-url={api_url}></div>

  <header
    id="user-header"
    class="w-full bg-gray-100 px-6 py-4 shadow-md justify-between items-center hidden flex"
  >
    <span class="text-gray-800 font-medium" id="user-name"></span>
    <form method="POST" action="/api/logout">
      <button
        type="submit"
        class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600"
      >
        Cerrar sesión
      </button>
    </form>
  </header>

  <main
    id="main"
    class="max-w-2xl mx-auto bg-white p-6 rounded-2xl shadow-lg hidden mt-6"
  >
    <h1 class="text-2xl font-bold mb-6 text-center">Subir imagen</h1>

    <form id="upload-form" class="space-y-4">
      <input
        type="text"
        id="nombre-comercio"
        autocomplete="off"
        name="nombre"
        placeholder="Comercio"
        class="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 w-full"
        required
      />

      <select
        class="border border-gray-300 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 w-full"
        id="sheetSelector"
      >
      </select>

      <input
        type="file"
        name="imagen"
        id="imagen"
        accept="image/*"
        required
        class="w-full file:border file:border-gray-300 file:px-4 file:py-2 file:rounded-lg"
      />

      <button
        type="submit"
        class="w-full bg-blue-600 text-white py-3 rounded-xl hover:bg-blue-700 transition"
      >
        Subir y procesar imagen
      </button>
    </form>

    <p id="status" class="mt-4 text-center text-sm text-gray-700"></p>

    <div id="result" class="mt-6 bg-gray-100 p-4 rounded-lg hidden">
      <h2 class="text-lg font-semibold mb-2">Texto extraído:</h2>
      <pre id="extracted-text" class="whitespace-pre-wrap text-gray-800"></pre>
    </div>
  </main>

  <!-- Vista alternativa cuando no hay Google conectado -->
  <div
    id="google-required"
    class="max-w-md mx-auto bg-white p-6 mt-20 rounded-xl text-center hidden"
  >
    <p class="text-lg text-red-600 font-semibold mb-4">
      Tu cuenta no está conectada a Google
    </p>
    <p class="text-gray-700 mb-4">
      Para poder guardar los resultados en Google Sheets, necesitas autorizar
      acceso a tu cuenta de Google.
    </p>
    <a
      href=`${api_url}/auth/google`
      class="bg-red-500 text-white py-2 px-4 rounded-xl hover:bg-red-600 transition"
    >
      Conectar cuenta de Google
    </a>
  </div>

  <script type="module">
    const api_url = document.getElementById('config').dataset.apiUrl;
    const mainSection = document.getElementById('main');
    const googleRequiredSection = document.getElementById('google-required');
    const userHeader = document.getElementById('user-header');
    const userNameSpan = document.getElementById('user-name');

    let userName = '';
    let userEmail = '';

    async function checkAuthAndGoogle() {
      const res = await fetch(`${api_url}/auth/me`, {
        method: 'GET',
        credentials: 'include',
      });

      const data = await res.json();

      if (!res.ok || !data.authenticated) {
        window.location.href = '/';
        return;
      }
      userName = data.user.name;
      userEmail = data.user.email;
      userNameSpan.textContent = `👋 Hola, ${data.user.name}`;
      userHeader.classList.remove('hidden');

      if (data.hasGoogleAccess) {
        mainSection.classList.remove('hidden');
      } else {
        googleRequiredSection.classList.remove('hidden');
      }
    }

    async function getListSheets() {
      const res = await fetch(`${api_url}/api/upload/sheets`, {
        method: 'GET',
        credentials: 'include',
      });

      if (!res.ok) {
        return [];
      }

      const data = await res.json();

      return data.sheets || [];
    }

    checkAuthAndGoogle();

    const listOfSheets = await getListSheets();

    if (listOfSheets.length > 0) {
      const options = listOfSheets.map(
        sheet =>
          `<option value="${sheet.spreadsheetId}">${sheet.filename}</option>`,
      );
      options.unshift(
        '<option value="">Selecciona una hoja de cálculo</option>',
      );
      document.getElementById('sheetSelector').innerHTML = options.join('');
    } else {
      document.getElementById('sheetSelector').innerHTML =
        '<option value="">No hay hojas disponibles</option>';
    }

    const form = document.getElementById('upload-form');
    const statusEl = document.getElementById('status');
    const resultBox = document.getElementById('result');
    const resultText = document.getElementById('extracted-text');

    form.addEventListener('submit', async e => {
      e.preventDefault();
      const nombreComercio = document.getElementById('nombre-comercio').value;
      const fileInput = document.getElementById('imagen');
      const documentId = document.querySelector('#sheetSelector').value;
      if (documentId === 'No hay hojas disponibles') {
        documentId = '';
      }
      const file = fileInput.files[0];
      if (!file) return;

      statusEl.textContent = 'Subiendo imagen y procesando...';
      resultBox.classList.add('hidden');

      const formData = new FormData();
      formData.append('imagen', file);
      formData.append('username', userName);
      formData.append('comercio', nombreComercio);
      formData.append('email', userEmail);
      formData.append('documentId', documentId);

      try {
        const res = await fetch(`${api_url}/api/upload`, {
          method: 'POST',
          body: formData,
          credentials: 'include',
        });

        const data = await res.json();

        if (res.ok) {
          const fileName = data.newSheet;
          const title = data.comercio;
          statusEl.textContent = 'Imagen procesada correctamente.';
          resultText.textContent =
            `Archivo creado: ${fileName} ✅` || 'No se encontró texto.';
          resultBox.classList.remove('hidden');
        } else {
          statusEl.textContent = data.message || 'Error al procesar la imagen.';
        }
      } catch (err) {
        statusEl.textContent = 'Error al conectar con el servidor.';
      }
    });
  </script>
</Layout>
